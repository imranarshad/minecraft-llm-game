import{V as e,E as t,R as s,a as o,S as i,C as a,P as n,W as r,b as l,A as c,D as d,B as h,M as u,c as m,d as p,e as g}from"./vendor-Ckhooc-o.js";import{C as f}from"./llm-DlapZI4k.js";!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver((e=>{for(const s of e)if("childList"===s.type)for(const e of s.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)})).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();class y{constructor(){this.scene=null,this.camera=null,this.renderer=null,this.canvas=null,this.crosshair=null,this.isRunning=!1,this.isPaused=!1,this.performance={fps:0,frameCount:0,lastTime:0,lastFpsUpdate:0},this.player={position:new e(0,2,0),rotation:new t(0,0,0),velocity:new e(0,0,0),onGround:!1,speed:5,jumpPower:8},this.keys={},this.camera_rotation={x:0,y:0,rotationSpeed:.05},this.mouse={x:0,y:0},this.trackpad={isScrolling:!1,lastTouchTime:0,panSensitivity:.002,scrollSensitivity:.01},this.world={blocks:new Map,chunkSize:16,worldHeight:32},this.blockTypes={grass:{color:5025616,name:"Grass",rarity:"common"},stone:{color:7697781,name:"Stone",rarity:"common"},wood:{color:9268835,name:"Wood",rarity:"common"},sand:{color:16771899,name:"Sand",rarity:"common"},water:{color:2201331,name:"Water",rarity:"common",transparent:!0},coal:{color:2171169,name:"Coal Ore",rarity:"uncommon"},iron:{color:12434877,name:"Iron Ore",rarity:"uncommon"},gold:{color:16766720,name:"Gold Ore",rarity:"rare"},diamond:{color:48340,name:"Diamond Ore",rarity:"rare"},obsidian:{color:1710618,name:"Obsidian",rarity:"rare"},ice:{color:14743295,name:"Ice",rarity:"uncommon",transparent:!0},leaves:{color:3046706,name:"Leaves",rarity:"common",transparent:!0},lava:{color:16733986,name:"Lava",rarity:"rare",glowing:!0},snow:{color:16777215,name:"Snow",rarity:"uncommon"},dirt:{color:9268835,name:"Dirt",rarity:"common"}},this.selectedBlockType="grass",this.worldGen={seed:1e6*Math.random(),octaves:3,amplitude:6,frequency:.03,chunkSize:8,renderDistance:2,loadedChunks:new Map,heightMap:new Map,biomes:["plains","forest","desert","mountains","ocean"],maxChunksPerFrame:1,lastChunkCheck:0},this.raycaster=new s,this.mouse3D=new o,this.targetedBlock=null,this.highlightMesh=null}async init(){this.canvas=document.getElementById("gameCanvas"),this.crosshair=document.getElementById("crosshair"),this.scene=new i,this.scene.background=new a(8900331),this.camera=new n(75,window.innerWidth/window.innerHeight,.1,1e3),this.renderer=new r({canvas:this.canvas,antialias:!0}),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=l,this.setupLighting(),this.setupControls(),console.log("Game engine initialized")}setupLighting(){const e=new c(4210752,.6);this.scene.add(e);const t=new d(16777215,.8);t.position.set(50,50,50),t.castShadow=!0,t.shadow.mapSize.width=2048,t.shadow.mapSize.height=2048,t.shadow.camera.near=.5,t.shadow.camera.far=500,t.shadow.camera.left=-50,t.shadow.camera.right=50,t.shadow.camera.top=50,t.shadow.camera.bottom=-50,this.scene.add(t)}setupControls(){document.addEventListener("keydown",(e=>{this.keys[e.code]=!0,"Space"===e.code&&(e.preventDefault(),this.jump()),"KeyM"===e.code&&(e.preventDefault(),this.removeBlock()),"KeyB"===e.code&&(e.preventDefault(),this.placeBlock())})),document.addEventListener("keyup",(e=>{this.keys[e.code]=!1})),this.canvas.addEventListener("mousemove",(e=>{const t=this.canvas.getBoundingClientRect();this.mouse.x=(e.clientX-t.left)/t.width*2-1,this.mouse.y=-(e.clientY-t.top)/t.height*2+1,this.updateCrosshair(e.clientX-t.left,e.clientY-t.top)})),this.setupTrackpadControls(),console.log("Keyboard-only controls initialized"),console.log("Controls: WASD=Move, Arrows=Look, Space=Jump, B=Place Block, M=Remove Block, Shift=Run"),console.log("Mouse: Point at blocks to target them (no clicking needed)"),console.log("Trackpad: Two-finger pan to look around, two-finger scroll to move"),console.log("Crosshair will follow mouse cursor to show where you are pointing")}createWorld(){this.generateInitialChunks(),console.log("Infinite world generation initialized")}noise(e,t,s=this.worldGen.seed){let o=0,i=this.worldGen.amplitude,a=this.worldGen.frequency;for(let n=0;n<this.worldGen.octaves;n++)o+=Math.sin((e+s)*a)*Math.cos((t+s)*a)*i,i*=.5,a*=2;return Math.floor(o)}generateInitialChunks(){const e=Math.floor(this.player.position.x/this.worldGen.chunkSize),t=Math.floor(this.player.position.z/this.worldGen.chunkSize);for(let s=e-this.worldGen.renderDistance;s<=e+this.worldGen.renderDistance;s++)for(let e=t-this.worldGen.renderDistance;e<=t+this.worldGen.renderDistance;e++)this.generateChunk(s,e)}generateChunk(e,t){const s=`${e},${t}`;if(this.worldGen.loadedChunks.has(s))return;const o=e*this.worldGen.chunkSize,i=t*this.worldGen.chunkSize;for(let a=o;a<o+this.worldGen.chunkSize;a++)for(let e=i;e<i+this.worldGen.chunkSize;e++){const t=this.noise(a,e),s=this.getBiome(a,e);for(let o=Math.max(-5,t-3);o<=t;o++){let i="stone";i=o===t?this.getSurfaceBlock(s,t):o>t-2?this.getSubSurfaceBlock(s):this.getDeepBlock(o),this.addBlock(a,o,e,i)}Math.random()<.02&&this.generateDecoration(a,t+1,e,s)}this.worldGen.loadedChunks.set(s,!0)}getBiome(e,t){const s=Math.sin(.01*e)*Math.cos(.01*t);return s>.5?"mountains":s>.2?"forest":s<-.3?"desert":s<-.1?"ocean":"plains"}getSurfaceBlock(e,t){switch(e){case"desert":return"sand";case"ocean":return t<-2?"water":"sand";case"mountains":return t>5?"snow":"stone";default:return"grass"}}getSubSurfaceBlock(e){switch(e){case"desert":case"ocean":return"sand";default:return"dirt"}}getDeepBlock(e){const t=Math.random();if(e<-5){if(t<.005)return"diamond";if(t<.015)return"gold";if(t<.03)return"iron";if(t<.08)return"coal"}return"stone"}generateDecoration(e,t,s,o){switch(o){case"forest":this.generateTree(e,t,s);break;case"mountains":Math.random()<.3&&this.addBlock(e,t,s,"stone");break;case"desert":if(Math.random()<.1)for(let o=0;o<3;o++)this.addBlock(e,t+o,s,"sand")}}generateTree(e,t,s){const o=3+Math.floor(3*Math.random());for(let a=0;a<o;a++)this.addBlock(e,t+a,s,"wood");const i=t+o;for(let a=-2;a<=2;a++)for(let t=-2;t<=2;t++)for(let o=0;o<=2;o++)Math.abs(a)+Math.abs(t)+o<4&&Math.random()>.3&&this.addBlock(e+a,i+o,s+t,"leaves")}setupPlayer(){this.updateCamera(),this.createHighlightMesh(),this.isRunning=!0,this.gameLoop(),console.log("Player ready")}createHighlightMesh(){const e=new h(1.02,1.02,1.02),t=new u({color:16777215,wireframe:!0,transparent:!0,opacity:.8});this.highlightMesh=new m(e,t),this.highlightMesh.visible=!1,this.scene.add(this.highlightMesh)}gameLoop(){if(!this.isRunning||this.isPaused)return void(this.isRunning&&requestAnimationFrame((()=>this.gameLoop())));const e=performance.now();this.performance.frameCount++,e-this.performance.lastFpsUpdate>1e3&&(this.performance.fps=Math.round(1e3*this.performance.frameCount/(e-this.performance.lastFpsUpdate)),this.performance.frameCount=0,this.performance.lastFpsUpdate=e,this.performance.fps<30&&console.warn(`Low FPS detected: ${this.performance.fps} FPS - Consider reducing render distance`)),this.updatePlayer(),this.updateCamera(),this.updateBlockTargeting(),this.updateWorldGeneration(),this.renderer.render(this.scene,this.camera),requestAnimationFrame((()=>this.gameLoop()))}updatePlayer(){const t=.016;this.keys.ArrowLeft&&(this.camera_rotation.y+=this.camera_rotation.rotationSpeed),this.keys.ArrowRight&&(this.camera_rotation.y-=this.camera_rotation.rotationSpeed),this.keys.ArrowUp&&(this.camera_rotation.x+=this.camera_rotation.rotationSpeed),this.keys.ArrowDown&&(this.camera_rotation.x-=this.camera_rotation.rotationSpeed),this.camera_rotation.x=Math.max(-Math.PI/2,Math.min(Math.PI/2,this.camera_rotation.x));const s=new e;if(this.keys.KeyW&&(s.z-=1),this.keys.KeyS&&(s.z+=1),this.keys.KeyA&&(s.x-=1),this.keys.KeyD&&(s.x+=1),s.length()>0){s.normalize();const e=new p;e.makeRotationY(this.camera_rotation.y),s.applyMatrix4(e);const o=this.keys.ShiftLeft||this.keys.ShiftRight?1.8*this.player.speed:this.player.speed;s.multiplyScalar(o*t),this.player.position.add(s)}this.player.onGround?this.player.velocity.y=0:this.player.velocity.y-=.4,this.player.position.y+=this.player.velocity.y*t,this.player.position.y<=2?(this.player.position.y=2,this.player.onGround=!0,this.player.velocity.y=0):this.player.onGround=!1}jump(){this.player.onGround&&(this.player.velocity.y=this.player.jumpPower,this.player.onGround=!1)}updateCamera(){this.camera.rotation.order="YXZ",this.camera.rotation.y=this.camera_rotation.y,this.camera.rotation.x=this.camera_rotation.x,this.camera.position.copy(this.player.position)}addBlock(e,t,s,o="grass"){const i=`${e},${t},${s}`;if(this.world.blocks.has(i))return;const a=this.blockTypes[o];if(!a)return;const n=new h(1,1,1);let r;r=a.transparent?new g({color:a.color,transparent:!0,opacity:.7}):a.glowing?new u({color:a.color,emissive:a.color,emissiveIntensity:.3}):new g({color:a.color});const l=new m(n,r);l.position.set(e,t,s),a.transparent||(l.castShadow=!0),l.receiveShadow=!0,this.world.blocks.set(i,{mesh:l,type:o,rarity:a.rarity||"common",properties:a}),this.scene.add(l)}removeBlock(){if(this.targetedBlock){const{x:e,y:t,z:s}=this.targetedBlock.object.position,o=`${e},${t},${s}`,i=this.world.blocks.get(o);i&&(this.scene.remove(i.mesh),this.world.blocks.delete(o),console.log(`Removed ${i.type} block at (${e}, ${t}, ${s})`))}}placeBlock(){if(this.targetedBlock){const e=this.targetedBlock.face.normal,t=this.targetedBlock.object.position.clone();t.add(e);const s=Math.round(t.x),o=Math.round(t.y),i=Math.round(t.z);this.addBlock(s,o,i,this.selectedBlockType),console.log(`Placed ${this.selectedBlockType} block at (${s}, ${o}, ${i})`)}}getBlockIntersection(){return this.targetedBlock}setSelectedBlockType(e){this.blockTypes[e]&&(this.selectedBlockType=e,console.log(`Selected block type: ${this.blockTypes[e].name}`))}handleResize(){const e=window.innerWidth,t=window.innerHeight;this.camera.aspect=e/t,this.camera.updateProjectionMatrix(),this.renderer.setSize(e,t)}pause(){this.isPaused=!0}resume(){this.isPaused=!1}destroy(){this.isRunning=!1,this.renderer&&this.renderer.dispose()}updateBlockTargeting(){this.raycaster.setFromCamera(new o(this.mouse.x,this.mouse.y),this.camera);const e=Array.from(this.world.blocks.values()).map((e=>e.mesh)),t=this.raycaster.intersectObjects(e);if(t.length>0){const e=t[0];this.targetedBlock=e,this.highlightMesh.position.copy(e.object.position),this.highlightMesh.visible=!0}else this.targetedBlock=null,this.highlightMesh.visible=!1}updateCrosshair(e,t){this.crosshair&&(this.crosshair.style.left=e+"px",this.crosshair.style.top=t+"px",this.crosshair.style.transform="translate(-50%, -50%)")}setupTrackpadControls(){this.canvas.addEventListener("wheel",(e=>{Math.abs(e.deltaY)<50&&Math.abs(e.deltaX)<50&&(e.preventDefault(),Math.abs(e.deltaX)>Math.abs(e.deltaY)&&(this.camera_rotation.y-=e.deltaX*this.trackpad.panSensitivity),Math.abs(e.deltaY)>Math.abs(e.deltaX)&&(this.camera_rotation.x-=e.deltaY*this.trackpad.panSensitivity,this.camera_rotation.x=Math.max(-Math.PI/2,Math.min(Math.PI/2,this.camera_rotation.x))),this.trackpad.lastTouchTime=Date.now())}),{passive:!1}),this.canvas.addEventListener("touchstart",(e=>{2===e.touches.length&&(e.preventDefault(),this.trackpad.isScrolling=!0,this.trackpad.startTouch={x:(e.touches[0].clientX+e.touches[1].clientX)/2,y:(e.touches[0].clientY+e.touches[1].clientY)/2})}),{passive:!1}),this.canvas.addEventListener("touchmove",(e=>{if(2===e.touches.length&&this.trackpad.isScrolling){e.preventDefault();const t={x:(e.touches[0].clientX+e.touches[1].clientX)/2,y:(e.touches[0].clientY+e.touches[1].clientY)/2};if(this.trackpad.startTouch){const e=t.x-this.trackpad.startTouch.x,s=t.y-this.trackpad.startTouch.y;this.camera_rotation.y-=e*this.trackpad.panSensitivity*.5,this.camera_rotation.x-=s*this.trackpad.panSensitivity*.5,this.camera_rotation.x=Math.max(-Math.PI/2,Math.min(Math.PI/2,this.camera_rotation.x)),this.trackpad.startTouch=t}}}),{passive:!1}),this.canvas.addEventListener("touchend",(e=>{e.touches.length<2&&(this.trackpad.isScrolling=!1,this.trackpad.startTouch=null)}),{passive:!1}),console.log("Trackpad controls enabled: Two-finger gestures for camera movement")}updateWorldGeneration(){const e=Date.now();if(e-this.worldGen.lastChunkCheck<500)return;this.worldGen.lastChunkCheck=e;const t=Math.floor(this.player.position.x/this.worldGen.chunkSize),s=Math.floor(this.player.position.z/this.worldGen.chunkSize);let o=0;for(let a=t-this.worldGen.renderDistance;a<=t+this.worldGen.renderDistance;a++)for(let e=s-this.worldGen.renderDistance;e<=s+this.worldGen.renderDistance;e++){const t=`${a},${e}`;this.worldGen.loadedChunks.has(t)||o<this.worldGen.maxChunksPerFrame&&(this.generateChunk(a,e),o++)}const i=this.worldGen.renderDistance+3;for(const[a]of this.worldGen.loadedChunks){const[e,o]=a.split(",").map(Number);if(Math.max(Math.abs(e-t),Math.abs(o-s))>i){this.unloadChunk(e,o);break}}}unloadChunk(e,t){const s=`${e},${t}`,o=e*this.worldGen.chunkSize,i=t*this.worldGen.chunkSize;let a=0;for(let n=o;n<o+this.worldGen.chunkSize;n++)for(let e=i;e<i+this.worldGen.chunkSize;e++)for(let t=-10;t<=10;t++){const s=`${n},${t},${e}`,o=this.world.blocks.get(s);o&&(this.scene.remove(o.mesh),o.mesh.geometry.dispose(),o.mesh.material.dispose(),this.world.blocks.delete(s),a++)}this.worldGen.loadedChunks.delete(s),console.log(`Unloaded chunk ${s} - removed ${a} blocks`)}}class w{constructor(){this.engine=null,this.isReady=!1,this.isLoading=!1,this.selectedModel="Llama-3.2-1B-Instruct-q4f16_1-MLC",this.systemPrompt='You are a helpful AI assistant for a Minecraft-like block building game with an infinite procedurally generated world.\n\nYour role is to help players with:\n- Building tips and techniques using the expanded block palette\n- Creative building ideas for different biomes\n- Exploration strategies for the infinite world\n- Information about block types and their properties\n- Biome-specific building suggestions\n\nAvailable blocks: Grass, Stone, Wood, Sand, Water, Dirt, Coal Ore, Iron Ore, Gold Ore, Diamond Ore, Lava, Ice, Snow, Leaves, Obsidian\n\nBiomes in the world: Plains, Forest, Desert, Mountains, Ocean\n\nBlock properties:\n- Transparent blocks: Water, Ice, Leaves\n- Glowing blocks: Lava\n- Rare ores: Diamond (deepest), Gold, Iron, Coal (underground)\n\nKeep responses brief, friendly, and focused on building/exploration help.\nUse simple language and be encouraging about exploring the infinite world.\nMention biome-specific building opportunities when relevant.\n\nExample topics you can help with:\n- "How do I build a mountain fortress?"\n- "What should I build in the desert biome?"\n- "How to find rare ores?"\n- "Ideas for an ocean base?"\n- "How to use the new transparent blocks?"'}async init(e){if(!this.isLoading&&!this.isReady){this.isLoading=!0;try{console.log("Initializing LLM engine..."),this.engine=await f(this.selectedModel,{initProgressCallback:t=>{if(console.log("LLM Loading progress:",t),e){const s=t.progress||0;e(s)}}}),console.log("LLM engine initialized successfully"),this.isReady=!0,this.isLoading=!1,await this.testConnection()}catch(t){throw console.error("Failed to initialize LLM:",t),this.isReady=!1,this.isLoading=!1,t}}}async testConnection(){try{const e=await this.engine.chat.completions.create({messages:[{role:"system",content:this.systemPrompt},{role:"user",content:"Say 'AI Assistant Ready!' if you can help with building in Minecraft."}],temperature:.7,max_tokens:50});console.log("LLM Test Response:",e.choices[0].message.content)}catch(e){console.error("LLM test failed:",e)}}async askQuestion(e){if(!this.isReady||!this.engine)throw new Error("LLM is not ready. Please wait for initialization.");try{console.log("User question:",e);const t=[{role:"system",content:this.systemPrompt},{role:"user",content:e}],s=(await this.engine.chat.completions.create({messages:t,temperature:.8,max_tokens:200,top_p:.9})).choices[0].message.content;return console.log("AI response:",s),s}catch(t){throw console.error("Error getting LLM response:",t),new Error("Sorry, I had trouble processing your question. Please try again.")}}async getBuildingSuggestion(e){return{grass:"Grass blocks are great for nature builds! Try making a garden, park, or the roof of an underground bunker. They also work well for camouflaged buildings.",stone:"Stone is perfect for castles, fortresses, and sturdy buildings. Mix with wood for a medieval look, or use alone for ancient ruins.",wood:"Wood blocks are excellent for cozy houses, bridges, and tree houses. Different wood types can create beautiful patterns and textures.",sand:"Sand blocks are ideal for desert builds, beaches, or Egyptian-style pyramids. Perfect for blending into desert biomes!",water:"Water blocks create beautiful fountains, pools, and moats! Use them for underwater bases or aquatic gardens.",dirt:"Dirt blocks are great for underground builds and natural-looking structures. Mix with grass for realistic terrain.",coal:"Coal ore blocks add dark accents to builds. Use sparingly for industrial or mine-themed structures.",iron:"Iron ore blocks provide a metallic gray look, perfect for modern or industrial builds.",gold:"Gold ore blocks add luxury and shine! Use for treasure rooms, palaces, or decorative accents.",diamond:"Diamond ore blocks are the most precious! Save for special builds like throne rooms or magical structures.",lava:"Lava blocks glow and provide dramatic lighting! Perfect for forges, volcanic builds, or mood lighting.",ice:"Ice blocks are transparent and cold-looking. Great for winter builds, igloos, or modern glass-like structures.",snow:"Snow blocks are perfect for winter scenes, arctic bases, or mountain-top builds.",leaves:"Leaf blocks are transparent and natural. Use for tree builds, gardens, or organic architecture.",obsidian:"Obsidian blocks are dark and mysterious. Perfect for gothic builds, portals, or dramatic accents."}[e]||"Try experimenting with different block combinations to create unique structures in the infinite world!"}getRandomBuildingTip(){const e=["Mix different block types for more interesting textures and patterns.","Use symmetry for grand buildings, or break it intentionally for a more organic feel.","Add depth to walls by varying the block placement - some blocks in, some out.","Small details like windows, doors, and decorations make buildings come alive.","Start with a simple shape and gradually add complexity as you build.","Use natural terrain features to inspire your building designs.","Try building at different scales - from tiny cottages to massive castles.","Lighting with lava blocks can completely change the mood of your structures.","Don't be afraid to rebuild parts if they don't look right.","Sometimes the most beautiful builds are the simplest ones.","Explore different biomes for unique building opportunities!","Use transparent blocks like ice and water for modern glass-like effects.","Dig deep to find rare ores for special decorative accents.","Build with the biome - sand castles in deserts, ice fortresses in snowy areas.","The infinite world means unlimited space for your creativity!"];return e[Math.floor(Math.random()*e.length)]}getQuickHelp(){return'🎮 Infinite World Building Guide:\n\n🌍 **Biomes Available:**\n• Plains: Grass builds, villages\n• Forest: Tree houses, wooden structures\n• Desert: Sand castles, pyramids\n• Mountains: Stone fortresses, caves\n• Ocean: Underwater bases, lighthouses\n\n🧱 **New Blocks:**\n• Transparent: Water 💧, Ice 🧊, Leaves 🍃\n• Glowing: Lava 🔥 (great for lighting!)\n• Ores: Coal ⚫, Iron ⚪, Gold 🟡, Diamond 💎\n\n💡 **Tips:**\n• Explore to find different biomes\n• Dig deep for rare ores\n• Mix blocks for better textures\n• Use biome-appropriate materials\n\nAsk me: "How to build in [biome]?" or "What can I do with [block]?"'}getCommonResponse(e){const t=e.toLowerCase();return t.includes("castle")?"🏰 For a castle: Use stone blocks for main walls, add wood accents. Build tall towers at corners with snow/ice for winter castles. In mountains, use the terrain for natural defenses!":t.includes("house")?"🏠 For houses: Wood in forests, sand in deserts, stone in mountains. Add water features, use lava for cozy fireplaces, ice for modern windows!":t.includes("tree")?"🌳 For trees: Wood trunk, leaves for canopy. In different biomes: snow-covered in mountains, desert palms with sand, ice trees for winter scenes!":t.includes("bridge")?"🌉 For bridges: Wood over water, stone in mountains, ice for modern looks. Use lava underneath for dramatic lighting effects!":t.includes("biome")||t.includes("desert")||t.includes("forest")||t.includes("mountain")||t.includes("ocean")?"🌍 Each biome offers unique opportunities! Desert: sand pyramids, oases. Forest: tree houses, wooden villages. Mountains: stone fortresses, snow castles. Ocean: underwater bases, lighthouses. Plains: open farmland, grand structures!":t.includes("ore")||t.includes("diamond")||t.includes("gold")||t.includes("iron")||t.includes("coal")?"⛏️ Find ores by digging deep underground! Coal is common, iron and gold are deeper, diamond is deepest and rarest. Use them for special decorative accents - gold for luxury, diamond for magical builds!":t.includes("water")||t.includes("lava")||t.includes("ice")?"💧 Special blocks add magic! Water: pools, moats, underwater builds. Lava: lighting, forges, volcanic themes. Ice: modern transparent architecture, winter scenes. All add unique atmosphere!":null}destroy(){this.isReady=!1,this.engine=null}}class k{constructor(){this.game=null,this.llm=null,this.isLoaded=!1,this.loadingScreen=document.getElementById("loadingScreen"),this.loadingProgress=document.getElementById("loadingProgress"),this.loadingText=document.getElementById("loadingText"),this.aiStatus=document.getElementById("aiStatus"),this.aiInput=document.getElementById("aiInput"),this.aiAsk=document.getElementById("aiAsk"),this.aiResponse=document.getElementById("aiResponse"),this.init()}async init(){try{this.updateProgress(10,"Initializing 3D Engine..."),this.game=new y,await this.game.init(),this.updateProgress(50,"Loading AI Assistant..."),this.llm=new w,await this.llm.init((e=>{const t=50+40*e;this.updateProgress(t,`Loading AI Model... ${Math.round(100*e)}%`)})),this.updateProgress(95,"Setting up game world..."),this.game.createWorld(),this.game.setupPlayer(),this.updateProgress(100,"Ready to play!"),this.setupEventListeners(),setTimeout((()=>{this.hideLoadingScreen(),this.setupAI()}),500)}catch(e){console.error("Failed to initialize game:",e),this.updateProgress(0,"Error loading game. Please refresh and try again."),this.aiStatus.textContent="Failed to load",this.aiStatus.className="error"}}updateProgress(e,t){this.loadingProgress.style.width=`${e}%`,this.loadingText.textContent=t}hideLoadingScreen(){this.loadingScreen.classList.add("hidden"),this.isLoaded=!0,console.log("Game loaded and ready for interaction")}setupAI(){this.llm&&this.llm.isReady?(this.aiStatus.textContent="AI Ready - Ask for help!",this.aiStatus.className="ready",this.aiInput.disabled=!1,this.aiAsk.disabled=!1):(this.aiStatus.textContent="AI not available",this.aiStatus.className="error")}setupEventListeners(){this.aiAsk.addEventListener("click",(()=>this.askAI())),this.aiInput.addEventListener("keypress",(e=>{"Enter"===e.key&&this.askAI()}));const e=document.querySelectorAll(".block-option");e.forEach((t=>{t.addEventListener("click",(t=>{e.forEach((e=>e.classList.remove("active"))),t.target.classList.add("active");const s=t.target.dataset.type;this.game&&this.game.setSelectedBlockType(s)}))})),document.addEventListener("visibilitychange",(()=>{this.game&&(document.hidden?this.game.pause():this.game.resume())})),window.addEventListener("resize",(()=>{this.game&&this.game.handleResize()}))}async askAI(){const e=this.aiInput.value.trim();if(e&&this.llm&&this.llm.isReady){this.aiInput.value="",this.aiResponse.textContent="AI is thinking...",this.aiResponse.classList.add("thinking"),this.aiAsk.disabled=!0;try{const t=await this.llm.askQuestion(e);this.aiResponse.textContent=t,this.aiResponse.classList.remove("thinking")}catch(t){console.error("AI Error:",t),this.aiResponse.textContent="Sorry, I had trouble understanding that. Please try again.",this.aiResponse.classList.remove("thinking")}finally{this.aiAsk.disabled=!1}}}}document.addEventListener("DOMContentLoaded",(()=>{new k})),window.addEventListener("error",(e=>{console.error("Unhandled error:",e.error)})),window.addEventListener("unhandledrejection",(e=>{console.error("Unhandled promise rejection:",e.reason)}));
